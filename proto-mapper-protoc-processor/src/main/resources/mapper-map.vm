package com.shaubert.protomapper.protoc;

import com.google.protobuf.AbstractMessageLite;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class ProtoMappers {

    public interface Mapper<DataClass, ProtoClass> {
        DataClass mapFromProto(InputStream inputStream) throws IOException;

        DataClass mapFromProto(ProtoClass protoClass);

        ProtoClass mapToProto(DataClass dataClass);

        Class<DataClass> getDataClass();

        Class<ProtoClass> getProtoClass();
    }

    protected List<Mapper<?, ?>> mappers = new ArrayList<Mapper<?, ?>>();

    private static ProtoMappers instance;

    public static ProtoMappers getInstance() {
        if (instance == null) {
            instance = new ProtoMappers();
        }
        return instance;
    }

    public ProtoMappers() {
#foreach($mapper in $mappers)
        mappers.add(new ${mapper}());
#end
    }

    @SuppressWarnings("unchecked")
    public <DataClass, ProtoClass> Mapper<DataClass, ProtoClass> getMapper(
            Class<DataClass> dataClass, Class<ProtoClass> protoClass) {
        for (Mapper<?, ?> mapper : mappers) {
            if (mapper.getDataClass().equals(dataClass)
                    && mapper.getProtoClass().equals(protoClass)) {
                return (Mapper<DataClass, ProtoClass>) mapper;
            }
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    public <DataClass, ProtoClass> Mapper<DataClass, ProtoClass> getFirstFromData(Class<DataClass> dataClass) {
        for (Mapper<?, ?> mapper : mappers) {
            if (mapper.getDataClass().equals(dataClass)) {
                return (Mapper<DataClass, ProtoClass>) mapper;
            }
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    public <DataClass, ProtoClass> Mapper<DataClass, ProtoClass> getFirstFromProto(Class<ProtoClass> protoClass) {
        for (Mapper<?, ?> mapper : mappers) {
            if (mapper.getProtoClass().equals(protoClass)) {
                return (Mapper<DataClass, ProtoClass>) mapper;
            }
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    public static AbstractMessageLite mapToMessage(Object data) {
        ProtoMappers mappers = getInstance();
        Mapper mapper = mappers.getFirstFromData(data.getClass());
        throwIfMapperNotFound(mapper, data.getClass());
        return (AbstractMessageLite) mapper.mapToProto(data);
    }

    @SuppressWarnings("unchecked")
    public static <T> T mapFromProto(Object proto) {
        ProtoMappers mappers = getInstance();
        Mapper mapper = mappers.getFirstFromProto(proto.getClass());
        throwIfMapperNotFound(mapper, proto.getClass());
        return (T) mapper.mapFromProto(proto);
    }

    @SuppressWarnings("unchecked")
    public static <T> T mapFromProtoByProtoClass(InputStream inputStream, Class<?> protoClass) throws IOException {
        ProtoMappers mappers = getInstance();
        Mapper mapper = mappers.getFirstFromProto(protoClass);
        throwIfMapperNotFound(mapper, protoClass);
        return (T) mapper.mapFromProto(inputStream);
    }

    @SuppressWarnings("unchecked")
    public static <T> T mapFromProtoByDataClass(InputStream inputStream, Class<?> dataClass) throws IOException {
        ProtoMappers mappers = getInstance();
        Mapper mapper = mappers.getFirstFromData(dataClass);
        throwIfMapperNotFound(mapper, dataClass);
        return (T) mapper.mapFromProto(inputStream);
    }

    private static void throwIfMapperNotFound(Object mapper, Class<?> forClass) {
        if (mapper == null) {
            throw new NullPointerException("mapper for " + forClass + " not found");
        }
    }
}