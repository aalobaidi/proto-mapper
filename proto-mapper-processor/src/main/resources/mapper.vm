package ${packageName};

import java.io.InputStream;
import java.io.IOException;

public class ${simpleClass}Mapper
    implements com.shaubert.protomapper.ProtoMappers.Mapper<${simpleClass}, ${protoClass}> {

    @Override
    public ${simpleClass} mapFromProto(InputStream stream) throws IOException {
#if (!${isEnum})
        ${protoClass} protoClass =
                ${protoClass}.parseFrom(stream);
        return mapFromProto(protoClass);
#else
        throw new UnsupportedOperationException("Can not parse enum class from InputStream, call ");
#end
    }

    @Override
    public ${simpleClass} mapFromProto(${protoClass} protoClass) {
#if (${isEnum})
        for (${simpleClass} result :
                ${simpleClass}.values()) {
            if (result.${enumNuberField} == protoClass.getNumber()) {
                return result;
            }
        }
        throw new IllegalArgumentException("Unable to parse ${simpleClass} from: "
                + protoClass);
#else
        ${simpleClass} result = new ${simpleClass}();
#foreach($field in $fields)
#if (${field.getType().isList()})
#set($generic = ${field.getType().getGenerics().get(0)})
        ${field.getType().getName()} ${field.getName()} = new java.util.ArrayList<${generic.getName()}>();
#if (!${generic.isMappingRequired()})
#if (!${generic.isByteArray()})
        ${field.getName()}.addAll(protoClass.${field.getProtoClassGetter()}List());
#else
        for (com.google.protobuf.ByteString el : protoClass.${field.getProtoClassGetter()}List()) {
            ${field.getName()}.add(el.toByteArray());
        }
#end
#else
        for (${generic.getProtoClass()} el : protoClass.${field.getProtoClassGetter()}List()) {
            ${field.getName()}.add(new ${generic.getName()}Mapper().mapFromProto(el));
        }
#end
        result.${field.getSetterName()}(${field.getName()});
#elseif (${field.getType().isMappingRequired()})
        result.${field.getSetterName()}(new ${field.getType().getName()}Mapper().mapFromProto(protoClass.${field.getProtoClassGetter()}()));
#else
        result.${field.getSetterName()}(protoClass.${field.getProtoClassGetter()}()#if(${field.getType().isByteArray()}).toByteArray()#end);
#end
#end
        return result;
#end
    }

    @Override
    public ${protoClass} mapToProto(${simpleClass} modelClass) {
#if (${isEnum})
        for (${protoClass} result :
                ${protoClass}.values()) {
            if (result.getNumber() == modelClass.${enumNuberField}) {
                return result;
            }
        }
        throw new IllegalArgumentException("Unable to convert " + modelClass
                + " to " + ${protoClass}.class);
#else
        ${protoClass}.Builder result =
                ${protoClass}.newBuilder();
#foreach($field in $fields)
#if (${field.getType().isList()})
#set($generic = ${field.getType().getGenerics().get(0)})
        for (${generic.getName()} el : modelClass.${field.getGetterName()}()) {
#if (!${generic.isMappingRequired()})
#if (!${generic.isByteArray()})
            result.${field.getProtoClassSetter()}(el);
#else
            result.${field.getProtoClassSetter()}(com.google.protobuf.ByteString.copyFrom(el));
#end
#else
            result.${field.getProtoClassSetter()}(new ${generic.getName()}Mapper().mapToProto(el));
#end
        }
#elseif (${field.getType().isMappingRequired()})
        result.${field.getProtoClassSetter()}(new ${field.getType().getName()}Mapper().mapToProto(modelClass.${field.getGetterName()}()));
#else
#if (!${field.getType().isByteArray()})
        result.${field.getProtoClassSetter()}(modelClass.${field.getGetterName()}());
#else
        result.${field.getProtoClassSetter()}(com.google.protobuf.ByteString.copyFrom(modelClass.${field.getGetterName()}()));
#end
#end
#end
        return result.build();
#end
    }

    @Override
    public Class<${simpleClass}> getDataClass() {
        return ${simpleClass}.class;
    }

    @Override
    public Class<${protoClass}> getProtoClass() {
        return ${protoClass}.class;
    }

}