package ${packageName};

import java.io.InputStream;
import java.io.IOException;

public class ${simpleClass}Mapper {

#if (!${isEnum})
    public static ${simpleClass} map(InputStream stream) throws IOException {
        ${protoClass} protoClass =
                ${protoClass}.parseFrom(stream);
        return map(protoClass);
    }
#end

    public static ${simpleClass} map(${protoClass} protoClass) {
#if (${isEnum})
        for (${simpleClass} res : ${simpleClass}.values()) {
            if (res.${enumNuberField} == protoClass.getNumber()) {
                return res;
            }
        }
        throw new IllegalArgumentException("Unable to parse ${simpleClass} from: " + protoClass);
#else
        ${simpleClass} result = new ${simpleClass}();
#foreach($field in $fields)
#if (${field.getType().isList()})
#set($generic = ${field.getType().getGenerics().get(0)})
        ${field.getType().getName()} ${field.getName()} = new java.util.ArrayList<${generic.getName()}>();
#if (!${generic.isMappingRequired()})
#if (!${generic.isByteArray()})
        ${field.getName()}.addAll(protoClass.${field.getProtoClassGetter()}List());
#else
        for (com.google.protobuf.ByteString el : protoClass.${field.getProtoClassGetter()}List()) {
            ${field.getName()}.add(el.toByteArray());
        }
#end
#else
        for (${generic.getProtoClass()} el : protoClass.${field.getProtoClassGetter()}List()) {
            ${field.getName()}.add(${generic.getName()}Mapper.map(el));
        }
#end
        result.${field.getSetterName()}(${field.getName()});
#elseif (${field.getType().isMappingRequired()})
        result.${field.getSetterName()}(${field.getType().getName()}Mapper.map(protoClass.${field.getProtoClassGetter()}()));
#else
        result.${field.getSetterName()}(protoClass.${field.getProtoClassGetter()}()#if(${field.getType().isByteArray()}).toByteArray()#end);
#end
#end
        return result;
#end
    }

}